<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security.xsd
						http://www.springframework.org/schema/security/oauth2 
						http://www.springframework.org/schema/security/spring-security-oauth2.xsd">
 
 	<!-- Just for testing... 
	<http pattern="/oauth/cache_approvals" security="none"/>
	<http pattern="/oauth/uncache_approvals" security="none"/>-->

	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	
 	<!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error handling 
		separately. This isn't mandatory, but it makes it easier to control the behaviour. -->
	<http pattern="/secure/*" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager" >
		<anonymous enabled="false" />
		<intercept-url pattern="/secure/*" access="ROLE_USER" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	
	<!-- Users and user_roles hardcoded -->
	<!--authentication-manager alias="authenticationManager" >
		<authentication-provider >
			<user-service id="userService">
				<user name="timo" password="test" authorities="ROLE_USER"/>
				<user name="peter" password="test" authorities="ROLE_ADMIN"/>
			</user-service>
		</authentication-provider>
	</authentication-manager-->
	
	<!-- Select users and user_roles from database -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="customUserDetails">
			<!--password-encoder ref="passwordEncoder" /-->
		</authentication-provider>
	</authentication-manager>
	<!--<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder"/>-->
	<!--beans:bean id="authProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userService" />
		<beans:property name="passwordEncoder" ref="passwordEncoder" />
	</beans:bean-->
 
 	<beans:bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="test" />
	</beans:bean>

	<beans:bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="test/client" />
		<beans:property name="typeName" value="Basic" />
	</beans:bean>

	<beans:bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<beans:bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
	</beans:bean>

	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" >
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<authentication-manager id="clientAuthenticationManager" >
		<authentication-provider user-service-ref="clientService" />
	</authentication-manager>
	
	<!-- Used for the persistence of tokens (currently an in memory implementation) -->
	<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />

	<!-- Used to create token and and every thing about them except for their persistence that is reposibility of TokenStore (Given here is a default implementation) -->
	<beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
		<beans:property name="clientDetailsService" ref="customClientDetails" />
	</beans:bean>

	<beans:bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler"/>

	<!-- The authorization-server (AuthorizationServerTokenServices) is an interface that defines everything necessary for token management -->
	<oauth:authorization-server client-details-service-ref="customClientDetails" token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler">
		<!-- Available authentication methods -->
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="test" token-services-ref="tokenServices" />
	
	<!-- Managing the oauth clients -->
	<beans:bean id="clientService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="customClientDetails" />
	</beans:bean>
	
	<!-- ClientsDeailsService: Entry Point to clients database (given is in memory implementation) -->
	<!--<oauth:client-details-service id="clientDetails">
		<oauth:client 
			client-id="the_client"
			authorized-grant-types="authorization_code,client_credentials"
            authorities="ROLE_USER"
            scope="read,write,trust"
            secret="secret" />
		<oauth:client 
			client-id="my-trusted-client-with-secret" 
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="somesecret"
			authorities="ROLE_USER"
			scope="read,write,trust"/> 
		 <oauth:client 
		 	client-id="my-trusted-client"
		 	authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"
			scope="read,write,trust"
			access-token-validity="60"/>
		<oauth:client 
			client-id="my-client-with-secret"
			authorized-grant-types="client_credentials"
			authorities="ROLE_CLIENT"
			scope="read"
			secret="secret" />
		<oauth:client 
			client-id="my-less-trusted-client" 
			authorized-grant-types="authorization_code,implicit"
			authorities="ROLE_CLIENT" />
		<oauth:client 
			client-id="my-less-trusted-autoapprove-client"
			authorized-grant-types="implicit"
			authorities="ROLE_CLIENT" />
		<oauth:client 
			client-id="my-client-with-registered-redirect" 
			authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_CLIENT"
			redirect-uri="http://anywhere?key=value"
			scope="read,trust" />
		<oauth:client
			client-id="my-untrusted-client-with-registered-redirect"
			authorized-grant-types="authorization_code"
			authorities="ROLE_CLIENT"
			redirect-uri="http://anywhere"
			scope="read" />
		<oauth:client 
			client-id="tonr"
			resource-ids="sparklr"
			authorized-grant-types="authorization_code,implicit"
			authorities="ROLE_CLIENT" 
			scope="read,write" 
			secret="secret" />
	</oauth:client-details-service>-->

	<global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<expression-handler ref="oauthExpressionHandler" />
	</global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
	
</beans:beans>
